{"version":3,"sources":["logo.svg","components/cards/card/card.component.jsx","components/cards/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","monster","name","CardList","monsters","map","App","state","searchField","fetch","then","response","json","people","setState","catch","err","this","filteredMonsters","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,kC,iKCM9BC,G,kBAAO,SAAAC,GAAK,OAErB,yBAAKC,UAAU,iCACX,4BAAKD,EAAME,QAAQC,SCJdC,G,MAAW,SAAAJ,GAAK,OAE5B,yBAAKC,UAAU,aACdD,EAAMK,SAASC,KAAI,SAAAJ,GAAO,OACxB,kBAAC,EAAD,CAAMA,QAASA,UCoCJK,E,YAtCf,aAAc,IAAD,8BACX,+CAEKC,MAAQ,CACXH,SAAU,GACVI,YAAa,IALJ,E,iFAWO,IAAD,OACnBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAAEV,SAAUS,OACzCE,OAAM,SAAAC,GAAQ,MAAMA,O,+BAEV,IAAD,SAG4BC,KAAKV,MAA/BH,EAHF,EAGEA,SAAUI,EAHZ,EAGYA,YACZU,EAAmBd,EAASe,QAAO,SAAAlB,GAAO,OAC9CA,EAAQC,KAAKkB,cAAcC,SAASb,EAAYY,kBAIlD,OACE,yBAAKpB,UAAU,OAEb,2BAAOsB,KAAK,SAASC,YAAY,iBAAiBC,SAAU,SAAAC,GAAC,OAAI,EAAKX,SAAS,CAACN,YAAaiB,EAAEC,OAAOC,WACtG,kBAAC,EAAD,CAAUvB,SAAUc,S,GA/BVU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.0271ed41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\n\r\n\r\nexport const Card = props => (\r\n\r\n    <div className='card-container hvr-bounce-out'>\r\n        <h1>{props.monster.name}</h1>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../cards/card/card.component';\r\nimport './card.list.styles.css';\r\n\r\n\r\nexport const CardList = props =>(\r\n\r\n <div className='card-list'>  \r\n {props.monsters.map(monster => \r\n    <Card monster={monster} />)}\r\n  </div>\r\n)","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/cards/card-list.component';\n\n\nclass App extends Component{\nconstructor(){\n  super();\n\n  this.state = {\n    monsters: [],\n    searchField: ''\n  };\n}\n// when rendered on DOM, do ...\n// PROMISE\n// json method from fetched API put into components state\ncomponentDidMount(){\nfetch('https://jsonplaceholder.typicode.com/users')\n.then(response => response.json())\n.then(people => this.setState({ monsters: people}))\n.catch(err => {throw err})\n}\n  render(){\n\n      // destruct obj props a const\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n\n    return (\n      <div className=\"App\">\n        {/* comp that list the monsters from API array */}\n        <input type=\"search\" placeholder=\"search monster\" onChange={e => this.setState({searchField: e.target.value})} />\n        <CardList monsters={filteredMonsters} /> \n     \n      </div>\n    );\n  }\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}